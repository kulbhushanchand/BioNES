[["index.html", "BioNES documentation Preface Developer Links License Citation Disclaimer", " BioNES documentation Kulbhushan Chand 2021-05-06 Preface Biofeedback Nintendo Entertainment System (BioNES) A plug-and-play MATLAB based tool to use NES games for multimodal biofeedback Developer Kulbhushan Chand Ph.D. Research Scholar Emerging Technologies Lab Department of Electronics and Communication Engineering Dr B R Ambedkar National Institute of Technology Jalandhar, India Links The code is available at GitHub repository. Browse source code at https://github.com/kulbhushanchand/BioNES Download from release page at https://github.com/kulbhushanchand/BioNES/releases Report a bug at https://github.com/kulbhushanchand/BioNES/issues License This project is distributed under the GPLv3 License. See LICENSE for more information. Citation To be filled citation Disclaimer This project is in no way affiliated or endorsed by Nintendo or Nintendo of America. Nintendo is a registered trademark of Nintendo of America Inc. This software is not intended to be a substitute for professional medical advice, diagnosis, or treatment. Always seek the advice of your physician or other qualified health providers with any questions you may have regarding a medical condition. "],["intro.html", "Chapter 1 Introduction 1.1 About the project 1.2 Built with 1.3 Features 1.4 Why this tool?", " Chapter 1 Introduction 1.1 About the project Figure 1.1: Block diagram of BioNES BioNES (Biofeedback Nintendo Entertainment System) is an open-source plug-and-play MATLAB-based tool to use NES games for multimodal biofeedback. It can be used to deliver the HRV biofeedback via any game designed for the NES system. It can receive real-time heartbeat interval (RR) values from Arduino + ear-clip PPG sensor (or any sensor capable to send real-time heart rate pulses to Arduino). After the acquisition, it computes real-time heart rate and heart rate variability (HRV), biofeedback parameters and then sends feedback to the FCEUX emulator which is used to play the NES game. Besides in-game biofeedback, it also offers real-time data visualization in time-series plots and local saving of data for offline analysis. This tool can benefit the researchers (especially from biofeedback or physiological measurement domain) or hobbyist, who want to quickly deploy a biofeedback system, want to explore the NES games for biofeedback, or just want to record the physiological signals. 1.2 Built with GUI is built using the Guide tool in MATLAB-v2017b. Arduino Mega board for hardware. Grove ear-clip sensor for photoplethysmograph (PPG) data acquisition. FCEUX emulator to play NES game. Super Mario Bros. game for feedback. 1.3 Features Plug and play biofeedback system for SMB game (using other NES games may need minor changes). Data acquisition sampling rate of 10 Hz to acquire RR intervals from Arduino. Feedback is displayed at a fixed refresh rate at 60 Hz. Real-time data visualization (in time-series plot). Local saving of data in .mat format for offline analysis. Screenshot of current GUI for reference purpose. 3 independent modes of working. Data acquisition only Gameplay without biofeedback Gameplay with biofeedback 1.4 Why this tool? Biofeedback therapy has potential benefits for managing stress. However, traditional biofeedback is an expensive and monotonous process. To increase the engagement in biofeedback sessions, video games can be used. But the problem is the limited availability of affordable video-game-based biofeedback solutions. BioNES is developed keeping in mind the cost-effectiveness and ease of use to deliver biofeedback while simultaneously providing reliability as a research tool and flexibility to allow researchers/developers to modify as per their needs. The efficacy of BioNES is validated using observational study and the paper is currently under review in a reputed journal. "],["getting-started.html", "Chapter 2 Getting Started 2.1 Prerequisites 2.2 Installation and Running 2.3 GUI", " Chapter 2 Getting Started 2.1 Prerequisites MATLAB MATLAB-ver2017b was used to develop the BioNES. It was also tested with ver2015b and ver2018b for backward and forward compatibility respectively. Arduino hardware board. Grove ear-clip sensor. FCEUX. NES game ROM file. This version of BioNES uses the Super Mario Bros. game without any modification, for other NES games you have to make minor changes to the BioNES.lua file. 2.2 Installation and Running Download the latest stable release and extract contents into your MATLAB working directory. Alternatively, you can also download the latest code from the repository. Open BioNES.m in MATLAB. Connect Arduino board to PC with USB cable. Upload BioNES.ino sketch to Arduino board. Connect the ear-clip sensor to the Arduino board. Run BioNES.m and wait for the GUI to appear. In the GUI select the COM port for the Arduino and press the Connect button. After a successful connection, appropriate settings can be selected. Select the biofeedback checkbook (if biofeedback gameplay is needed) and press the Connect button in the Game panel. The FCEUX window will open with the pre-configured settings. Start the acquisition from the Start/Stop button in the Control panel. The acquisition runs till a set time or can be stopped manually. After successful completion, the information panel shows various statistics related to the acquisition. Finally, the data can be saved for offline processing. 2.3 GUI Figure 2.1: GUI of BioNES. Various sub-components (Settings, Plot, Information, and Control) are labelled. Minimum interaction steps to use are numbered 1 to 4. Figure 2.2: Biofeedback enables NES game in FCEUX emulator. Feedback bar is shown on the top The user interface (Figure 2.1) is straightforward and easy to use. The various sub-components are arranged in panels as per their functionality. The main sub-components of the GUI and their functions are described below: Settings Arduino: Lists the available COM ports. Establishes a connection to the Arduino. Game: List the option to enable biofeedback and start the game. Settings: Lists various settings with defaults. Information Status: Panel showing the current status of the GUI. Daq Information: Panel for important information regarding the current session. Results: Panel to display the results after the successful acquisition. Plot Live plot: Panel displaying a real-time plot of the acquired data. Control Control: Panel to control the state of the GUI and data logging. Figure 2.1 shows the minimum number of steps (labeled from 1 to 4) required for a simple biofeedback session. However, the number of steps may increase depending upon the users preference. Following is a brief explanation for each of these steps. Select the COM port from the list to which the Arduino board is connected. Connect to the board. Select the checkbox to enable biofeedback. Start the game. Start the acquisition and play the game. You can pre-maturely stop the acquisition using the Start/Stop button at will or let it finish by itself till the session duration. "],["structure.html", "Chapter 3 Structure 3.1 Directory structure 3.2 Dependencies", " Chapter 3 Structure 3.1 Directory structure The main directory structure (with files) is shown below. .  .gitattributes  .gitignore  BioNES.fig  BioNES.ino  BioNES.m  CODE_OF_CONDUCT.md  Help.fig  Help.m  LICENSE  README.md  scratchpad.m  analysis  analysis.m  analysis_old.m  docs  docs_source  fceux64 An overview of what each of these does is described in the following tables. Table 3.1: Description of core files/folders FILE / DIRECTORY DESCRIPTION BioNES.fig Design file that holds the layout of the GUI. It is created by GUIDE. It is required if further changes to GUI are needed. It is programmatically created by GUIDE and should not be modified outside the GUIDE environment. The BioNES can be started by opening this file. BioNES.ino Sketch file that is required to be uploaded to the Arduino board. This makes the board a to accept commands and send data to the BioNES. BioNES.m Function file that holds the callback functions and/or the user-defined functions which define the logic to interact with GUI. It is programmatically created by GUIDE during the first run and later modified by `GUIDE` as per changes in BioNES.fig. The BioNES can be started by executing this file from the editor window. Help.fig Design file that holds the layout of the help GUI. Help.m Function file that holds the callback functions of the help GUI. fceux64 Directory of FCEUX emulator (64-bit version) Table 3.2: Description of optional files/folders FILE / DIRECTORY DESCRIPTION .gitattributes File used by git to save settings for the project. .gitignore File used by git to ignore specific files/folders from version control. CODE_OF_CONDUCT.md File defining the code of conduct for contributions. LICENSE File defining the terms and conditions of license for this project. README.md File defining a short introduction to the project. scratchpad.m File used as temporary code storage/testing. docs/ Documentation folder docs_source/ Source of documentation. The bookdown package in R is used to create the documentation. analysis Folder with function files used in analysis of offline data. 3.2 Dependencies Here discussed what functions and scripts BioNES is dependent upon. The matlab.codetools.requiredFilesAndProducts function is used to generate the list of dependencies. List of MathWorks products possibly required MATLAB - ver.9.3 Instrument Control Toolbox - ver.3.12 List of user-authored MATLAB program files required &#39;C:\\Users\\Kulbhushan\\Documents\\MATLAB\\BioNES\\BioNES.fig&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\MATLAB\\BioNES\\BioNES.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\MATLAB\\BioNES\\Help.fig&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\MATLAB\\BioNES\\Help.m&#39; It is worth noting that all the core-functions resides in the BioNES.m and some of the functions are in-lined to avoid overheads. "],["functions-and-variables.html", "Chapter 4 Functions and variables 4.1 Functions 4.2 Variables", " Chapter 4 Functions and variables 4.1 Functions The following list of functions is available. Each of these functions resides in the BioNES.m files (See brief description in Table 3.1). Additionally, the BioNES.m file includes different callback functions associated with different sub-components of the GUI. These are self-explanatory with a brief explanation given in the function file itself. Table 4.1: List of available functions (GUI callback functions are not listed) SYNTAX DESCRIPTION BioNES(varargin) Main function. Help(varargin) Holds the callback functions of the help GUI. CalculateResults(handles) Calculates the final results like recorded session duration, sampling frequency, number of samples, and data quality. connectArduino(handles,string) Defines the logic to connect with the `Arduino` board. connectGame(handles) Connect with the FCEUX and start the game. GuiStates(handles, string) Initialize the GUI sub-components as per various states. InitializeVariables(handles) Function file that initializes variable to their default state. logSys(handles, logString) Log system state for debugging. SetParam(handleName, string, color, handleType) Set color and text parameters for various GUI components. 4.2 Variables The following variables are available in 3 categories. The variable names are self-explanatory. Table 4.2: List of available variables Settings Data Flags settings_daqDateTime data_relaxedHrv flag_isAcquiring settings_sessionDate data_stressedHrv flag_isTimeRef settings_sessionTime data_sampleNumber settings_customId data_timeStampsMsec settings_sessionId data_ibi settings_sessionDuration data_beat settings_samplingRate data_dataRel settings_samplingTimeInterval data_hrAvg setting_plotWidth data_hrvAvg settings_rightOffset data_playerState settings_numberOfSamples data_isMainScreen settings_serialPort data_gameMode settings_ard data_positionInLevel settings_fceux data_score settings_xMin data_recordedNumberOfSamples settings_xMax data_recordedSessionDuration settings_yMin data_recordedSamplingRate settings_yMax data_dataQuality data_logSysData "],["usage.html", "Chapter 5 Usage", " Chapter 5 Usage To be filled "],["roadmap.html", "Chapter 6 Roadmap", " Chapter 6 Roadmap See the open issues for a list of proposed features (and known issues). "],["changelog.html", "Chapter 7 Changelog", " Chapter 7 Changelog You can check all the releases on the GitHub release page. 1.0.0 2021-05-03 This is the first stable release. It was used for the clinical trials and in the academic paper submitted for peer review. "],["contribute.html", "Chapter 8 Contributing 8.1 How to contribute? 8.2 Code of Conduct", " Chapter 8 Contributing 8.1 How to contribute? Any contributions you make are greatly appreciated. You can contribute to this project in the following ways. Add new functionality If you would like to add some new functionality/features to the project, feel free to fork the project. If you are satisfied with your modification and would like to commit the changes to this project, you can follow the easy steps below - Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request Review code You can review the source code at GitHub repository. Your expert scrutiny may give us directions for any code optimization. You can propose your changes via GitHub issue. Raise issues about bugs/features/doubts In case you found any bugs, want any new feature, or have any questions regarding the project, feel free to file a GitHub issue for the same. Proof-read the documentation Despite our best efforts, there may be some typos, grammatical errors, and missing information in the documentation. You can use raise a GitHub issue for any changes sought. Cite if used in a publication You can also cite this project if you are using it for your work. See Citation for more information. Star on GitHub You can help increase the visibility of this project by starring the GitHub repository. Share with others You can greatly help the reach by sharing the project links with others on social media. You can also review the project on your blog or social media post. 8.2 Code of Conduct Please note that this project is released with a Contributor Code of Conduct. By contributing to this project you agree to abide by its terms. "],["references.html", "References", " References "]]
